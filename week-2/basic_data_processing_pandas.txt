Basic Data Processing with Pandas

Python can be used to manipulate, clean, and query data by looking at
the Pandas data tool kit

-The Series Data Structure
  Series()

  The series is one of the core data structures in pandas. You think of it
  a cross between a list and a dictionary. The items are all stored in
  an order and there's labels with which you can retrieve them. An easy way
  to visualize this is two columns of data. The first is the special index,
  a lot like the dictionary keys. While the second is your actual data.
  It's important to note that the data column has a label of its own and
  can be retrieved using the .name attribute. This is different than
  with dictionaries and is useful when it comes to merging multiple
  columns of data.

  list to series and dict to series
  difference between nan and None
  head()
  We see that mixed types for data values or index labels are no problem
  for Pandas.

  Difference between NaN and None and how does efficiency reasons around it

-Querying a Series
  A panda.Series can be queried, either by the index position or the
  index label. As we saw, if you don't give an index to the series,
  the position and the label are effectively the same values

  iloc - index based attribute
  loc - label based attribute
  Safer to use iloc and loc attributes directly as compared to indexing op

-Vectorization in Numpy library
  a pretty shocking difference in the speed and demonstrates why data
  scientists need to be aware of parallel computing features and start
  thinking in functional programming terms

-Magic Functions in jupyter
  begin with a % sign. In jupyter notebook you can use '%' + 'tab'

  you can write your own magic functions too!!!

  Cellular Magic Functions - begin with 2 '%' sign
  %%timeit -n no_of_iterations

-Broadcasting in pandas and numpy
  Pandas does support iterating through a series much like a dictionary,
  allowing you to unpack values easily. But if you find yourself iterating
  through a series, you should question whether you're doing things in the
  best possible way.

  With broadcasting, you can apply an operation to every value in the series,
  changing the series.

  For instance, if we wanted to increase every random variable by 2, we
  could do so quickly using the += operator directly on the series object.

  iteritems()

-Custom Vectorized Functions
  Go through the numpy documentation to understand this better.

-Gotchas
   the append method doesn't actually change the underlying series.
   It instead returns a new series which is made up of the two appended
   together

   This is actually a significant issue for new Pandas users who are used
   to objects being changed in place. So watch out for it, not just with
   append but with other Pandas functions as well.
